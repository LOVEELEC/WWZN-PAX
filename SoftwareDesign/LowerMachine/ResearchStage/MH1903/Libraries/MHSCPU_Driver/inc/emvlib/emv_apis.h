#ifndef EMV_APIS_H_
#ifdef __cplusplus
extern "C" {
#endif
#define EMV_APIS_H_

#ifndef NULL
#define NULL   0
#endif

/* APDU的"命令-响应"对数据结构 */
typedef struct /* 命令结构 */
{
	unsigned char  Command[4];   /* 命令头 */
	unsigned short Lc;           /* 将要发送的数据字节数 */
	unsigned char  DataIn[512];  /* 将要发送的数据缓冲区 */
	unsigned short Le;           /* 期望接收的数据字节数 */
}APDU_SEND;

typedef struct /* 响应结构 */
{
	unsigned short LenOut;      /* 接收缓冲区有效数据长度 */
	unsigned char  DataOut[512];/* 接收缓冲区*/
	unsigned char  SWA;         /* 第一个状态字节 */
	unsigned char  SWB;         /* 第二个状态字节 */
}APDU_RESP;

/**
 * ===================================================================
 * 智能卡接口的硬件/软件初始化
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 *      无
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *      无
 * ===================================================================
 */
void          s_Icc_Init( void );

/**
 * ===================================================================
 * 获取内核中每个通道的使用状况
 *
 * 参数:
 *      无
 *
 * 返回:
 *      > 0 - 有通道正在使用
 *      0   - 没有通道使用  
 */
int IccPowerStatus( void );

/**
 * ===================================================================
 * 卡片初始化，获取ATR，解析ATR，应用参数
 * -------------------------------------------------------------------
 * 参数:
 * -------------------------------------------------------------------
 *     [输入]slot:
 * 		        bit[2:0] : 通道编号(0~7). 
 *              bit[4:3] : 操作电压配置位 
 *                            00 - 5V; 
 *                            01 - 1.8V; 
 *                            10 - 3V; 
 *                            11 - 5V
 *              bit[5]  :  pps支持与否配置位
 *                            0  - 不支持
 *                            1  - 支持
 *              bit[6]  :  速率配置位   
 *                            0 - 9600bps 
 *                            1 - 38400bps
 *              bit[7]   : 指定使用的规范类型
 *                            0 - EMV; 
 *                            1 - ISO7816-3 
 * -------------------------------------------------------------------
 *      [输出]ATR:  
 *              ATR[ 0 ]     : ATR的有效数据个数.
 *              ATR[ 1 : n ] : 有效的ATR数据缓冲区.
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 * 		请查看下面的"错误代码列表"
 * ===================================================================
 */
unsigned char IccInit(unsigned char slot, unsigned char *ATR);

/**
 * ===================================================================
 * 检测卡片是否在卡槽
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入] slot :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 * 		请查看下面的"错误代码列表"
 * ===================================================================
 */
unsigned char IccDetect(unsigned char slot);

/**
 * ===================================================================
 * 读卡器与卡片之间进行数据交互
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入] slot      :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入] ApduSend  :  读卡器要发送的命令结构体指针
 * -------------------------------------------------------------------
 * [输出] ApduRecv  :  卡片响应数据结构体指针  
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 * 		请查看下面的"错误代码列表"
 * ===================================================================
 */
unsigned char IccIsoCommand(unsigned char slot, APDU_SEND *ApduSend, APDU_RESP *ApduRecv);

/**
 * ===================================================================
 * 停活卡片，执行卡片下电序列
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *      无.
 * ===================================================================
 */
void          IccClose(unsigned char slot);

/**
 * ===================================================================
 * 配置针对T=0卡片是否发送"GETRESPONSE"读回卡片中剩余的有效数据.
 * -------------------------------------------------------------------
 * 参数： 
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  autoresp :  标志
 *                     0 - 发送"GETRESPONSE"命令取回卡片中的剩余有效数
 *                         据
 *                     1 - no auto
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *      无
 * -------------------------------------------------------------------
 * 注意：
 * -------------------------------------------------------------------
 *     只对T=0的卡有效
 * ===================================================================
 */
void          IccAutoResp(unsigned char slot, unsigned char autoresp);

/**
 * ===================================================================
 * 卡片初始化操作序列参数配置
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述    
 * -------------------------------------------------------------------
 * [输入]ParaConfig  : 配置参数，按位图解析，位格式请参考下面的宏定义
 *              #VCC_5000MV      5000mV
 *              #VCC_3000MV      3000mV
 *              #VCC_1800MV      1800mV
 *              #BAUD_NORMAL     Fi = 372, Di = 1
 *              #BAUD_M2         Fi = 372, Di = 2
 *              #BAUD_M4         Fi = 372, Di = 4
 *              #SUP_PPS         PPS
 *              #SPEC_ISO        ISO mode                         
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *       0 - 成功 
 *       其它，错误
 * -------------------------------------------------------------------
 * 注意：
 *       1)必须在调用"IccInit"之前进行配置，否则配置无效. 
 *       2)可以按照下面示例方式配置
 *         eg.
 *         IccChannelConfig( 0,  VCC_3000MV | BAUD_M4 | SUP_PPS | SPEC_ISO );
 *       3)如果指定了规范模式为EMV,它将忽略速度模式配置
 * ===================================================================
 */
#define BAUD_MASK      ( 3 << 5 )  /* 波特率配置掩码 */
#define BAUD_M4        ( 3 << 5 )  /* 38400bps */
#define BAUD_M2        ( 2 << 5 )  /* 19200bps */
#define BAUD_NORMAL    ( 1 << 5 )  /* 9600bps */

#define VCC_MASK       ( 3 << 2 )  /* 电源电压配置掩码 */
#define VCC_5000MV     ( 3 << 2 )  /* 5V */
#define VCC_3000MV     ( 2 << 2 )  /* 3V */
#define VCC_1800MV     ( 1 << 2 )  /* 1.8V */

#define SUP_PPS        ( 1 << 1 )  /* PPS配置位 */
#define SPEC_ISO       ( 1 << 0 )  /* ISO配置位 */
int           IccChannelConfig( unsigned char slot, unsigned int ParaConfig );

/**
 * ===================================================================
 * 获取开机后的拔插卡次数
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 *      无
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *      拔插卡次数
 * ===================================================================
 */
int           IccGetInsertCnt( void );

/**
 * ===================================================================
 * 禁止/使能同步卡时钟控制权
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 禁止 / 1 - 使能
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *         无
 * ===================================================================
 */
void Mc_Clk_Enable( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制C7信号的方向
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 输出 / 1 - 输入
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *       无
 * ===================================================================
 */
void Mc_Io_Dir( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 获取C7信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *         电平逻辑状态: 
 *             0   - 低
 *             非0 - 高
 * ===================================================================
 */
unsigned char Mc_Io_Read( unsigned char slot );

/**
 * ===================================================================
 * 控制C7信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 低电平 / 1 - 高电平 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    无
 * ===================================================================
 */
void Mc_Io_Write( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制卡片工作电源
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 关闭电源 / 1 - 打开电源
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *     无
 * ===================================================================
 */
void Mc_Vcc( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制C2信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 低电平 / 1 - 高电平 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    无
 * ===================================================================
 */
void Mc_Reset( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制C3信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 低电平 / 1 - 高电平 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    无
 * ===================================================================
 */
void Mc_Clk( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制C4信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 低电平 / 1 - 高电平 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    无
 * ===================================================================
 */
void Mc_C4_Write( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 控制C8信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * [输入]  mode     :  0 - 低电平 / 1 - 高电平 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    无
 * ===================================================================
 */
void Mc_C8_Write( unsigned char slot, unsigned char mode );

/**
 * ===================================================================
 * 获取C4信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    0 - 低电平 / 1 - 高电平
 * ===================================================================
 */
unsigned char Mc_C4_Read( unsigned char slot );

/**
 * ===================================================================
 * 获取C8信号的电平逻辑状态
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述 
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *    0 - 低电平 / 1 - 高电平
 * ===================================================================
 */
unsigned char Mc_C8_Read( unsigned char slot );

/**
 * ===================================================================
 * 获取卡座是否被占用
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *     1 - 占用 / 0 - 空闲
 * ===================================================================
 */
unsigned char Read_CardSlotInfo( unsigned char slot );

/**
 * ===================================================================
 * 设置卡座是否被占用标志
 * -------------------------------------------------------------------
 * 参数：
 * -------------------------------------------------------------------
 * [输入]  slot     :  请查阅函数"IccInit"中的描述  
 * -------------------------------------------------------------------
 * [输入]  slotopen :  1 - 占用 / 0 - 空闲
 * -------------------------------------------------------------------
 * 返回：
 * -------------------------------------------------------------------
 *     无
 * ===================================================================
 */
void Write_CardSlotInfo( unsigned char slot, unsigned char slotopen );

/* 应用编程接口(API)级别的错误代码列表 */
#define   DEV_OTHERERR       0x03  /*设备其它错误，可能由硬件引起*/
#define   SLOTERR            0x04  /*卡通道错误*/
#define   PROTOCALERR        0x06  /*协议错误*/
#define   CARD_OUT           0x02  /*卡拨出*/
#define   NO_INITERR         0x07  /*没有初始化*/
#define   DATA_LENTHERR      0x05  /*数据长度错误*/
#define   PARERR             0x01  /*奇偶错误*/
#define   FUN_PARAERR        0x09  /*传递给函数的参数错误*/
#define   UNKOWN_LOGICAL     0x0A  /*未知通信逻辑*/
#define   DEV_CONFLICT       0x0B  /*共享定时器资源冲突*/

#define   ATR_TSERR          0x31  /*  正反向约定错误  */
#define   ATR_TCKERR         0x32  /*  复位校验错误    */
#define   ATR_TIMEOUT        0x33  /*  复位等待超时    */
#define   ATR_TA1ERR         0x34  /*  TA1错误         */
#define   ATR_TA2ERR         0X35  /*  TA2错误         */
#define   ATR_TA3ERR         0x36  /*  TA3错误         */
#define   ATR_TB1ERR         0x37  /*  TB1错误         */
#define   ATR_TB2ERR         0x38  /*  TB2错误         */
#define   ATR_TB3ERR         0x39  /*  TB3错误         */
#define   ATR_TC1ERR         0x3a  /*  TC1错误         */
#define   ATR_TC2ERR         0x3b  /*  TC2错误         */
#define   ATR_TC3ERR         0x3c  /*  TC3错误         */
#define   ATR_TD1ERR         0x3d  /*  TD1错误         */
#define   ATR_TD2ERR         0x3e  /*  TD2错误         */
#define   ATR_LENGTHERR      0x3f  /*  ATR数据长度错误  */
#define   ATR_TDORDERERR     0x30  /*  ISO标准中td包含的协议序列错误*/

#define   T0_TIMEOUT         0x41  /*  T=0等待时间溢出  */
#define   T0_MORESENDERR     0X42  /* 重传次数到限      */
#define   T0_MORERECEERR     0X43  /* 重收次数到限      */
#define   T0_PARERR          0x44  /* 校验错误          */
#define   T0_INVALIDSW       0X45  /* 无效的过程字节    */

#define   T1_BWTERR          0x11  /*   T=1字组等待时间错误  */
#define   T1_CWTERR          0x12  /*   T=1字符等待时间错误  */
#define   T1_ABORTERR        0x13  /*   放弃通信            */
#define   T1_EDCERR          0x14  /*   校验码错误          */
#define   T1_SYNCHERR        0x15  /*   同步错误            */
#define   T1_EGTERR          0x16  /*   字符保护时间错误    */
#define   T1_BGTERR          0x17  /*   字组保护时间错误    */
#define   T1_NADERR          0x18  /*   字组中NAD错误       */
#define   T1_PCBERR          0x19  /*   字组PCB错误         */
#define   T1_LENGTHERR       0x1a  /*   字组LEN错误         */
#define   T1_IFSCERR         0x1b  /*   IFSC错误            */
#define   T1_IFSDERR         0x1c  /*   IFSD错误            */
#define   T1_MOREERR         0x1d  /*   多次传送错误并放弃  */
#define   T1_PARITYERR       0x1e  /*   校验错误            */
#define   T1_INVALIDBLOCK    0x1f  /*  无效块               */
#define   T1_SENDERR         0x10  /*  发送错误             */

#define   PPSS_ERR           0x20  /* PPSS字符错误，非0xFF  */
#define   PPS1_ERR           0x21  /* PPS1字符与请求的不一致*/
#define   PCK_ERR            0x22  /* PCK校验字符错误       */

#ifdef __cplusplus
}
#endif

#endif
