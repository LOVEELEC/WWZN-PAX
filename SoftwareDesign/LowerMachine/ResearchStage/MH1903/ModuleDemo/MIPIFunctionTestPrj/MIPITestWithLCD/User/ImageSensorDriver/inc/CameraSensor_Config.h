/**
  ******************************************************************************
  * @file    OV7251_MIPI_Config.h
  * @author  LOVE_ELEC
  * @version V1.0.0
  * @date    18-Januery-2018
  * @brief   This file is used to define the OV7251 camera register configuration parameters.
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __OV7251_MIPI_CONFIG_H
#define __OV7251_MIPI_CONFIG_H

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "config.h"   
#define USE_OV7251_SENSOR    
#define USE_VECTOR_PARAM     
/* Exported types ------------------------------------------------------------*/    
typedef struct Reg
{
    #ifdef USE_OV7251_SENSOR
	uint16_t Address;			/*寄存器地址*/
	uint8_t Value;              /*寄存器值*/  //OV
    #endif
} Reg_Info;     
/* Exported constants --------------------------------------------------------*/     
/* Exported macro ------------------------------------------------------------*/  
/* Exported functions --------------------------------------------------------*/
/* Exported variables --------------------------------------------------------*/
#define OV7251_REG_NUM  (sizeof(OV7251_Sensor_Config)/sizeof(Reg_Info))	  //结构体数组成员数目

const Reg_Info OV7251_Sensor_Config[] = {
#ifdef USE_OV7251_SENSOR
    #ifdef USE_VECTOR_PARAM
    {0x0103, 0x01}, // software reset :0 off; 1 on
    {0x0100, 0x00}, // Bit[0] ModeSelect   0: Software_standby; 1: Streaming 
    {0x3005, 0x00}, // strobe bit3 io_strobe_oen  control input/output :0 input ; 1 output  控制摄像头曝光灯开关
    
    {0x3012, 0xC0}, // Bit[7:2] Debug control; Bit[1:0] mipi_ictl[1:0]
    {0x3013, 0xd2}, // Bit[7:6] Common mode voltage control for MIPI high speed transmitter
                    // Bit[5:4] Driving strength control of MIPI low power transmitter
                    // Bit[3] bp_d_hs_en_lat
                    // Bit[2] bp_c_hs_en_lat
                    // Bit[1] mipi_pad
                    // Bit[0] Debug control
    {0x3014, 0x04}, // Bit[2] MIPI enable  0: Disable; 1: Enable;
    {0x3016, 0xF0},
    {0x3017, 0xF0},
    {0x3018, 0xF0},
    {0x301a, 0xF0},
    {0x301b, 0xF0},
    {0x301c, 0xF0},
    {0x3023, 0x07},
    {0x3037, 0xF0},

    //PLL2  sys_clk = 80M,ADC_CLK = 240M
    {0x3098, 0x04},
    {0x3099, 0x28},
    {0x309a, 0x05},
    {0x309b, 0x04},
//    {0x309c, 0x00},
//    {0x309d, 0x00},
//    {0x309e, 0x01},
//    {0x309f, 0x00},

    //PLL1  pix_clk = 30M ,mipi_clk = 300M
    {0x30b0, 0x0a},
    {0x30b1, 0x01},
//    {0x30b2, 0x00},
    {0x30b3, 0x32},
    {0x30b4, 0x02},
    {0x30b5, 0x05},
    //*/
    {0x3106, 0x12},     //Bit[7] Enable XVCLK(must be 1 for video streaming); Bit[6:0] Debug Control
//    {0x3106, 0x92},
    //Manual exposure  time control
    {0x3500, 0x00},
    {0x3501, 0x1F}, 
    {0x3502, 0x80}, //'2':19.5us  ->'6': 97.5us @ext_clk=24M
    //	{0x3502, 0x30}, //'2':19.5us  ->'6': 97.5us @ext_clk=8M
        
    {0x3503, 0x07}, //bit[0]:manual exposure enable; bit[1]:manual AGC enable

    //Manual exposure Gain 
//    {0x3504, 0x00},  //sensor gain H
//    {0x3505, 0x00},  //sensor gain L
    {0x3509, 0x10},  //AEC AGC ADJ ,bit[4] = 1 use real gain ,bit[4] = 0 use sensor gain
//    {0x350a, 0x00},  //real gain H
    {0x350b, 0x10},  //real gain  L ; real gain =  2^n(16+x)/16,n is {0x350a,0x350b} bit[9:4] ,x is 0x350b's low bit[3:0]

    {0x3600, 0x1c},
    {0x3602, 0x62},
    {0x3620, 0xb7},
//    {0x3621, 0x05},
    {0x3622, 0x04},
    
    {0x3626, 0x21},
    {0x3627, 0x30},
//    {0x3632, 0xa3},
//    {0x3633, 0x34},
    {0x3634, 0x41},
    {0x3636, 0x00},
    
//    {0x3660, 0x80},
    {0x3662, 0x01},  //bit[1]=0 raw10
    {0x3664, 0xF0},
    {0x3669, 0x1A},
    {0x366a, 0x00},
    {0x366b, 0x50},
//    {0x3680, 0xf4},
//    {0x3681, 0x50},
//    {0x3682, 0x00},
    
    {0x3705, 0x41},
//    {0x3708, 0x20},
    {0x3709, 0x40},
//    {0x370d, 0x03},
//    {0x373b, 0x02},
    {0x373c, 0x08},
    {0x3742, 0x00},
//    {0x3744, 0x16},
//    {0x3745, 0x08},
//    {0x3781, 0xfc},
    {0x3788, 0x00},
    {0x37A8, 0x01},
    {0x37A9, 0xD8},

    {0x3800, 0x00},
    {0x3801, 0x7C},
    {0x3802, 0x00}, 
    {0x3803, 0x2C},
    {0x3804, 0x02},
    {0x3805, 0x13},
    {0x3806, 0x01},
    {0x3807, 0xC3},
    
    {0x3808, 0x00},  //ISP windows  X width H
    {0x3809, ORIG_WIN_LEN},	 //ISP windows X width L
    {0x380a, 0x00},  //ISP windows Y height H
    {0x380b, ORIG_WIN_LEN},  //ISP windows Y height L
   
    {0x380c, 0x03},
    {0x380d, 0x04},
    {0x380e, 0x02},
    {0x380f, 0x04},

    {0x3810, 0x00},		//ISP X start H
    {0x3811, 0x04},		//ISP X start L
    {0x3812, 0x00},		//ISP Y start H
    {0x3813, 0x05},		//ISP Y start L

    {0x3814, 0x11},
    {0x3815, 0x11},


//    //HSYNC start point
//    {0x3816, 0x00},
//    {0x3817, 0x00},
//    //HSYNC end point
//    {0x3818, 0x00},
//    {0x3819, 0x00},
//    //HSYNC first active row start position
//    {0x381a, 0x00},
//    {0x381b, 0x00},

    //subsampling 2:1
    {0x3820, 0x40},   //bit[1]: vertical binning 2; bit[2]:vertical flip
    {0x3821, 0x00},   //bit[0] horizontal binning 1; bit[2]:horizontal mirror


//    {0x382b, 0xfa},
    {0x382f, 0xC4},
    {0x3832, 0xFF},
    {0x3833, 0xFF},
    {0x3834, 0x00},
    {0x3835, 0x05},
    {0x3837, 0x00},

//    {0x3882, 0x04},
//    {0x3883, 0x00},
//    {0x38a4, 0x10},
//    {0x38a5, 0x00},
//    {0x38b1, 0x03},
    {0x3b80, 0x00},
    {0x3b81, 0xA5}, //strobe frame control

    //PWM registers  PWM frequency = 24M /(0x3b82+0x3b83)
    {0x3b82, 0x10},  //divider_H 
    {0x3b83, 0x00},  //divider_L
    {0x3b84, 0x08},  //duty_H
    {0x3b85, 0x00},  //duty_L	
    {0x3b86, 0x01},
    {0x3b87, 0x00},


    //strobe control
    {0x3b88, 0x00},
    {0x3b89, 0x00},
    {0x3b8a, 0x00},
    {0x3b8b, 0x05}, //control strobe shift

    {0x3b8c, 0x00},
    {0x3b8d, 0x00},
    {0x3b8e, 0x00},
    {0x3b8f, 0x1A},//control strobe pulse width,  '1':19.5us  ->'5': 97.5us,@ext_clk=24M
    //	{0x3b8f, 0x02},//control strobe pulse width,  '1':19.5us  ->'5': 97.5us,@ext_clk=8M

//    {0x3b90, 0x01},
//    {0x3b91, 0xb4},
//    {0x3b92, 0x00},
//    {0x3b93, 0x10},

    {0x3b94, 0x05},
    {0x3b95, 0xf2},
    {0x3b96, 0x40},

    {0x3C00, 0x89},
    {0x3C01, 0xAB},
    {0x3C02, 0x01},
    {0x3C03, 0x00},
    {0x3C04, 0x00},
    {0x3C05, 0x03},
    {0x3C06, 0x00},
    {0x3C07, 0x05},
    {0x3C0C, 0x00},
    {0x3C0D, 0x00},
    {0x3C0E, 0x00},
    {0x3C0F, 0x00},
//    {0x3033, 0xf0},

    {0x4001, 0xC2},
    {0x4004, 0x04},  //Black level calibration(BLC)
    {0x4005, 0x20},
    {0x404e, 0x01},
    
    {0x4300, 0xFF},
    {0x4301, 0x00},
    
    {0x4600, 0x00},
    {0x4601, 0x28},
    
    {0x4801, 0x0F},
    {0x4806, 0x0F},
    {0x4819, 0xAA},
    {0x4823, 0x3E},
    {0x4837, 0x21},
    
    {0x4A0D, 0x00},
    
    {0x5000, 0x85},
    {0x5001, 0x80},
    
    {0x0100, 0x01},  //software standby  - LOW POWER control
    
    #else
    
    {0x0103, 0x01},  //software reset :0 off; 1 on
    {0x0100, 0x00},
    {0x3001, 0x02},  // output drive capability control bit[6:5] 

    {0x3005, 0x08},  //strobe bit3 io_strobe_oen  control input/output :0 input ; 1 output

    {0x3013, 0x12}, 
    {0x3014, 0x04},
    {0x3016, 0x10},
    {0x3017, 0x00},
    {0x3018, 0x00},
    {0x301a, 0x00},
    {0x301b, 0x00},
    {0x301c, 0x00},
    {0x3037, 0xf0},
    {0x3080, 0x01},
    {0x3081, 0x00},
    {0x3082, 0x01},
    /*
    //PLL2  sys_clk = 80M,ADC_CLK = 240M
    {0x3098, 0x04},
    {0x3099, 0x28},
    {0x309a, 0x06},
    {0x309b, 0x04},
    {0x309c, 0x00},
    {0x309d, 0x00},


    {0x309e, 0x01},
    {0x309f, 0x00},

    //PLL1  pix_clk = 30M ,mipi_clk = 300M
    {0x30b0, 0x0a},
    {0x30b1, 0x02},
    {0x30b2, 0x00},
    {0x30b3, 0x32},
    {0x30b4, 0x02},
    {0x30b5, 0x05},
    /*/
    //PLL2  sys_clk = 80M,ADC_CLK = 240M
    {0x3098, 0x04},
    {0x3099, 0x28},
    {0x309a, 0x06},
    {0x309b, 0x04},
    {0x309c, 0x00},
    {0x309d, 0x00},

    {0x309e, 0x01},
    {0x309f, 0x00},

    //PLL1  pix_clk = 30M ,mipi_clk = 300M
    {0x30b0, 0x0a},
    {0x30b1, 0x02},
    {0x30b2, 0x00},
    {0x30b3, 0x32},
    {0x30b4, 0x02},
    {0x30b5, 0x05},
    //*/
    {0x3106, 0xd9},

    //Manual exposure  time control
    {0x3500, 0x00},
    {0x3501, 0x00}, 
    {0x3502, 0x30}, //'2':19.5us  ->'6': 97.5us @ext_clk=24M
    //	{0x3502, 0x30}, //'2':19.5us  ->'6': 97.5us @ext_clk=8M
        
    {0x3503, 0x03}, //bit[0]:manual exposure enable; bit[1]:manual AGC enable

    //Manual exposure Gain 
    {0x3504, 0x00},  //sensor gain H
    {0x3505, 0x00},  //sensor gain L
    {0x3509, 0x10},  //AEC AGC ADJ ,bit[4] = 1 use real gain ,bit[4] = 0 use sensor gain
    {0x350a, 0x00},  //real gain H
    {0x350b, 0x10},  //real gain  L ; real gain =  2^n(16+x)/16,n is {0x350a,0x350b} bit[9:4] ,x is 0x350b's low bit[3:0]

    {0x3600, 0xfc},
    {0x3620, 0xb7},
    {0x3621, 0x05},
    {0x3626, 0x31},
    {0x3627, 0x40},
    {0x3632, 0xa3},
    {0x3633, 0x34},
    {0x3634, 0x40},
    {0x3636, 0x00},
    {0x3660, 0x80},
    {0x3662, 0x01},  //bit[1]=0 raw10
    {0x3664, 0xf0},
    {0x366a, 0x10},
    {0x366b, 0x06},
    {0x3680, 0xf4},
    {0x3681, 0x50},
    {0x3682, 0x00},
    {0x3708, 0x20},
    {0x3709, 0x40},
    {0x370d, 0x03},
    {0x373b, 0x02},
    {0x373c, 0xe8},
    {0x3742, 0x00},
    {0x3744, 0x16},
    {0x3745, 0x08},
    {0x3781, 0xfc},
    {0x3788, 0x00},
    /*
    {0x3800, 0x00},
    {0x3801, 0x00},
    {0x3802, 0x00}, 
    {0x3803, 0x00},
    {0x3804, 0x01},
    {0x3805, 0x9f},
    {0x3806, 0x01},
    {0x3807, 0x9f},
    {0x3808, 0x00},  //ISP windows  X width H
    {0x3809, ORIGIMAGE_WIN_LEN},	 //ISP windows X width L
    {0x380a, 0x00},  //ISP windows Y height H
    {0x380b, ORIGIMAGE_WIN_LEN},  //ISP windows Y height L
    {0x380c, 0x05},
    {0x380d, 0x78},
    {0x380e, 0x00},
    {0x380f, 0xee},  */
    //		{0x3810, 0x00},		//ISP X start H
    //		{0x3811, 0x2a},		//ISP X start L
    //		{0x3812, 0x00},		//ISP Y start H
    //		{0x3813, 0x2a},		//ISP Y start L
    {0x3800, 0x00},
    {0x3801, 0x04},
    {0x3802, 0x00}, 
    {0x3803, 0x04},
    {0x3804, 0x01},
    {0x3805, 0x9f},
    {0x3806, 0x01},
    {0x3807, 0x9f},
    {0x3808, 0x00},  //ISP windows  X width H
    {0x3809,    },	 //ISP windows X width L
    {0x380a, 0x00},  //ISP windows Y height H
    {0x380b, ORIG_WIN_LEN},  //ISP windows Y height L
    {0x380c, 0x05},
    {0x380d, 0x78},
    {0x380e, 0x00},
    {0x380f, 0xee},

    {0x3810, 0x00},		//ISP X start H
    {0x3811, 0x00},		//ISP X start L
    {0x3812, 0x00},		//ISP Y start H
    {0x3813, 0x00},		//ISP Y start L

    //		{0x3810, 0x00},		//ISP X start H
    //		{0x3811, 0x2a},		//ISP X start L
    //		{0x3812, 0x00},		//ISP Y start H
    //		{0x3813, 0x2a},		//ISP Y start L

    {0x3814, 0x31},
    {0x3815, 0x31},


    //HSYNC start point
    {0x3816, 0x00},
    {0x3817, 0x00},
    //HSYNC end point
    {0x3818, 0x00},
    {0x3819, 0x00},
    //HSYNC first active row start position
    {0x381a, 0x00},
    {0x381b, 0x00},

    //subsampling 2:1
    {0x3820, 0x02},   //bit[1]: vertical binning 2; bit[2]:vertical flip
    {0x3821, 0x01},   //bit[0] horizontal binning 1; bit[2]:horizontal mirror


    {0x382b, 0xfa},
    {0x382f, 0x04},
    {0x3832, 0x00},
    {0x3833, 0x05},
    {0x3834, 0x00},
    {0x3835, 0x05},
    {0x3882, 0x04},
    {0x3883, 0x00},
    {0x38a4, 0x10},
    {0x38a5, 0x00},
    {0x38b1, 0x03},
    {0x3b80, 0x00},
    {0x3b81, 0xff}, //strobe frame control

    //PWM registers  PWM frequency = 24M /(0x3b82+0x3b83)
    {0x3b82, 0x10},  //divider_H 
    {0x3b83, 0x00},  //divider_L
    {0x3b84, 0x08},  //duty_H
    {0x3b85, 0x00},  //duty_L	
    {0x3b86, 0x01},
    {0x3b87, 0x00},


    //strobe control
    {0x3b88, 0x00},
    {0x3b89, 0x00},
    {0x3b8a, 0x00},
    {0x3b8b, 0x00}, //control strobe shift

    {0x3b8c, 0x00},
    {0x3b8d, 0x00},
    {0x3b8e, 0x00},
    {0x3b8f, 0x02},//control strobe pulse width,  '1':19.5us  ->'5': 97.5us,@ext_clk=24M
    //	{0x3b8f, 0x02},//control strobe pulse width,  '1':19.5us  ->'5': 97.5us,@ext_clk=8M

    {0x3b90, 0x01},
    {0x3b91, 0xb4},
    {0x3b92, 0x00},
    {0x3b93, 0x10},

    {0x3b94, 0x05},
    {0x3b95, 0xf2},
    {0x3b96, 0xc8},

    {0x3033, 0xf0},

    {0x4004, 0x02},  //Black level calibration(BLC)

    {0x404e, 0x01},
    {0x4801, 0x0f},
    {0x4806, 0x0f},
    {0x4837, 0x43},
    {0x5a08, 0x00},
    {0x5a01, 0x00},
    {0x5a03, 0x00},
    {0x5a04, 0x10},
    {0x5a05, 0xa0},
    {0x5a06, 0x0c},
    {0x5a07, 0x78},
    {0x0100, 0x01},  //software standby  - LOW POWER control
    #endif
#endif
};
#ifdef __cplusplus
}
#endif

#endif /*__OV7251_MIPI_CONFIG_H */

/************************* (C) COPYRIGHT 2018 LOVE_ELEC ******END OF FILE******/
